module Monads.Exponentiation where

open import Relation.Binary.PropositionalEquality using (_≡_; refl)
open import Data.Nat

_^_ : ℕ → ℕ → ℕ
x ^ zero    = 1
x ^ (suc n) = x * (x ^ n)


------------------------------------------------------------------------
-- Some properties

{-
-- Associativity
^-assoc : (i j k x : ℕ) →
  ((x ^ i) * (x ^ j)) * (x ^ k) ≡ (x ^ i) * ((x ^ j)) * (x ^ k))
^-assoc m n p y = refl
-}